import findFirstGTE from './findFirstGTE'

/*
Given an array of integers sorted in increasing order and a target, find the index of the first element in the array that is larger than or equal to the target. Assume that it is guaranteed to find a satisfying number.
*/

describe('findFirstGTE', () => {
  it('finds index of first element larger than target', () => {
    expect(findFirstGTE([1, 3, 3, 5, 8, 8, 10], 2)).toBe(1)
    expect(findFirstGTE([0], 0)).toBe(0)
    expect(findFirstGTE([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10)).toBe(9)
    expect(findFirstGTE([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9)).toBe(8)
  })
  
  it('long list', () => {
    const list = `263 375 845 911 1114 1149 1618 1716 2112 2202 2353 2479 2575 2849 2996 3049 3179 3219 3291 3392 3408 3467 3622 4163 4361 4365 4400 4493 4499 4502 4616 4776 5140 5152 5342 5445 5506 5669 5713 5891 5941 6113 6239 6386 6513 7295 7494 7823 8066 8188 8264 8358 8409 8437 8633 8712 8751 8909 9001 9063 9250 9278 9387 9445 9461 9498 9498 9660 9732 9879 10129 10314 10647 10940 11000 11154 11271 11542 11577 11929 11997 12277 12278 12335 12400 12464 12517 12909 13023 13237 13278 13436 13495 13541 13715 14007 14008 14109 14112 14118 14233 14709 14897 14927 15070 15172 15243 15652 15672 15702 15818 15927 15932 16183 16507 16563 16732 16818 16827 16868 17325 17362 17464 17479 17649 17811 17865 17911 18030 18159 18288 18319 18358 18979 19148 19432 19453 19459 19514 19774 19832 19916 20079 20240 20469 20470 20777 20829 21464 21527 21707 21813 21867 22287 22334 22419 22431 22436 22486 22655 22960 23076 23149 23176 23578 23631 23701 23796 24051 24282 24391 24470 24520 24577 24805 24837 24947 25057 25102 25374 25711 25832 26148 26428 26469 26548 26579 27142 27174 27361 27421 27553 27579 27601 27607 27881 28188 28972 29312 29469 29543 29682 29721 29786 29810 30154 30518 31069 31261 31587 31722 31947 31988 32097 32152 32554 32640 32740 32935 33038 33161 33310 33445 33869 34057 34136 34145 34220 34235 34342 34447 34458 34463 34538 34639 35115 35242 35582 35588 35810 35940 35949 35971 36018 36083 36241 36326 36521 36588 36589 36819 36823 36861 37014 37186 37416 37465 37777 37825 37897 37927 37934 37980 38148 38277 38419 38517 38767 39112 39197 39361 39475 39850 39897 40084 40112 40298 40411 40454 40552 40681 40695 40713 40771 40799 41308 41316 41339 41460 41549 41574 41607 41607 42205 42389 42505 42523 42663 42908 42997 43072 43202 43472 43611 43731 44036 44127 44145 44655 44767 45406 45491 45504 45801 45913 46031 46139 46289 46300 46376 46438 46738 47118 47427 47556 47658 47690 47799 47939 48040 48113 48116 48374 48409 48419 48484 48495 48631 48820 49316 49363 49709 49938 50234 50423 50634 50645 50669 50698 50866 50929 51154 51361 51433 51581 51912 51938 52004 52022 52389 52541 52653 52877 52888 53010 53096 53165 53261 53266 53984 54153 54321 54476 54656 54840 55129 55467 55478 55759 55790 55791 55972 56138 56209 56262 56375 56797 57142 57249 57265 57308 57432 57442 57503 57515 57610 57642 57711 57946 57957 58213 58359 58530 58649 58883 58937 58949 59029 59143 59218 59384 59495 59572 59717 59973 60019 60040 60069 60074 60210 60328 60429 60556 60682 60699 60921 61076 61076 61182 61191 61215 61373 61435 61560 61590 61991 62340 62583 62712 62801 62882 62939 63108 63232 63248 63283 63287 63622 63739 63865 63912 63923 64023 64068 64079 64194 64322 64456 64654 64658 64721 64749 65118 65393 65544 65587 65765 65837 65917 66153 66266 66288 66295 66734 67042 67154 67208 67233 67425 67554 67610 67684 68130 68180 68189 68209 68218 68224 68248 68357 68370 68645 68740 68870 69106 69304 69316 69363 69439 69732 70010 70011 70076 70210 70301 70301 70363 70516 70741 71018 71038 71099 71352 71467 71498 71521 71619 71724 71727 71913 72034 72196 72522 72578 72675 72765 72976 73268 73600 73679 73747 74547 74605 74611 74649 74807 75165 75342 75439 75529 75575 75715 75854 75903 75972 76111 76127 76290 76358 76448 76638 76703 77012 77181 77265 77456 77466 77619 77757 77787 77874 77987 78008 78113 78181 78230 78410 78481 79698 79822 79843 79935 80026 80368 80573 80669 80695 80924 80937 80947 80950 81188 81275 81309 81366 82092 82280 82558 82719 82725 83082 83095 83236 83283 83352 83495 83502 83658 83795 83857 84014 84671 84782 84999 85059 85147 85256 85515 85530 85674 86042 86149 86283 86329 86408 86467 86678 86976 87019 87457 87515 87649 87665 87742 87762 88020 88277 88350 88370 88373 88579 88713 88784 88869 89296 89471 89650 89937 90108 90196 90208 90226 90299 90876 91069 91212 91266 91426 91623 91997 92436 92452 92886 93046 93713 93754 93831 93850 93930 93935 94033 94325 94397 95031 95054 95419 95767 95812 95863 96137 96390 96570 96719 96799 96845 97154 97505 97583 97790 97997 98172 98527 98572 98708 98865 98938 99017 99046 99048 99176 99330 99537`
      .split(' ').map(x => Number(x))
    expect(findFirstGTE(list, 47116)).toBe(322)
  })
  
  it('repeat values', () => {
    expect(findFirstGTE([1, 1, 1, 2, 3, 5, 5, 5], 3)).toBe(4)
    expect(findFirstGTE([1, 1, 1, 2, 3, 5, 5, 5], 4)).toBe(5)
  })
})